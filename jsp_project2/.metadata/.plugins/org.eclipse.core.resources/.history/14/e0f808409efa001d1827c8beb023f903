package controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.portlet.PortletFileUpload;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import Handler.PagingHandler;
import domain.BoardVO;
import domain.PagingVO;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    private static final Logger log= LoggerFactory.getLogger(BoardController.class);
    private RequestDispatcher rdp; //웹의 목적지 주소로 객체를 전달해주는 객체
    private BoardService bsv;
    private String destPage;
    private int isOk;
    //파일경로를 저장할 변수
    private String savePath;
    private final String UTF8="utf-8";// 인코딩 설정시
    
    public BoardController() {
        bsv = new BoardServiceImpl();
    }
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
    	// 캐릭터 인코딩 설정, 컨텐츠 타입 설정
    	request.setCharacterEncoding("utf-8");
    	response.setCharacterEncoding("utf-8");
    	response.setContentType("text/html; charset=utf-8");
    	
    	String uri = request.getRequestURI();
    	log.info(">>>uri>"+uri);
    	String path = uri.substring(uri.lastIndexOf("/")+1);
    	log.info(">>> path>"+path);
    	
    	switch(path) {
    	case "register":
    		destPage="/board/register.jsp";
    		break;
    	case "insert":
    		try {
    			//파일을 업로드할 물리적인 경로를 설정
    			savePath = getServletContext().getRealPath("/_fileUpload");
    			log.info(">>>> 파일 저장 경로 : "+savePath);
    			File fileDir = new File(savePath);
    			
    			DiskFileItemFactory fileitemFactory = new DiskFileItemFactory();
    			 // 파일의 저장위치를 담고있는 객체를 저장
    			fileitemFactory.setRepository(fileDir);
    			 // 파일 저장을 위한 임시 메모리 용량설정 : byte 단위
    			fileitemFactory.setSizeThreshold(2*1024*1024); //2MB
    			
    			BoardVO bvo = new BoardVO();
    			//multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
    			ServletFileUpload fileUpload = new ServletFileUpload();
    			
    			List<FileItem> itemList = fileUpload.parseRequest(request);
    			for(FileItem item : itemList) {
    				switch(item.getFieldName()) {
    				case "title" :
    					bvo.setTitle(item.getString(UTF8)); //인코딩 형식을 담아서 변환
    					break;
    				case "writer":
    					bvo.setWriter(item.getString(UTF8)); //인코딩 형식을 담아서 변환

    					break;
    				case "content":
    					bvo.setContent(item.getString(UTF8));
    					break;
    				case "image_file":
    					//이미지가 있는지 없는지 체크
    					if(item.getSize()>0) {	//데이터의 크기를 이용하여 유무 결정
    						String fileName = item.getName().substring(item.getName().lastIndexOf("/")+1);//경로를 포함한 파일이름	
    						fileName = System.currentTimeMillis()+"_"+fileName;
    						log.info(">>> fileName : "+fileName);
    						File uploadFilePath = new File(fileDir+File.separator+fileName);
    						log.info("실제 파일경로 : "+uploadFilePath);
    						
    						//저장
    						try {
								item.write(uploadFilePath); // 자바 개체를 디스크에 쓰기
								
							} catch (Exception e) {
								e.printStackTrace();
							}
    					}
    					break;
    				}
    			}
    			
    			
//				String tit = request.getParameter("title");
//				String wri = request.getParameter("writer");
//				String cont = request.getParameter("content");
//				
//				
//				BoardVO bvo = new BoardVO(tit,wri,cont);
//				isOk = bsv.insert(bvo);
//				log.info(">>> register > "+ (isOk>0 ? "성공":"실패"));
//				destPage="list";
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    	case "list":
    		try {
				List<BoardVO> list = new ArrayList<BoardVO>();
				list = bsv.list();
				request.setAttribute("list", list);
				log.info("list 성공~!!");
				log.info(">>> "+list.size());
				destPage="/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    	case "pagesub" :
    		try {
    			int page = Integer.parseInt(request.getParameter("pageNo"));
    			int qty = Integer.parseInt(request.getParameter("qty"));
    			
				PagingVO pgvo = new PagingVO(page,qty); //넣어도 안넣어도 상관없 1,10
				//전체 페이지 개수
				int totCount = bsv.getTotal();
				log.info("전체페이지 개수 : "+totCount);
				//limit를 이용한 select List를 호출 (startpage, qty
				List <BoardVO> list = bsv.getPageList(pgvo);
				log.info(">>>list : "+list.size()); //한페이지에 나와야 하는 리스트
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				log.info(">>:"+ph.getStartPage());
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공");
				destPage="/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    	case "page":
    		try {
				PagingVO pgvo = new PagingVO(1,10); //넣어도 안넣어도 상관없 1,10
				//전체 페이지 개수
				int totCount = bsv.getTotal();
				log.info("전체페이지 개수 : "+totCount);
				//limit를 이용한 select List를 호출 (startpage, qty
				List <BoardVO> list = bsv.getPageList(pgvo);
				log.info(">>>list : "+list.size()); //한페이지에 나와야 하는 리스트
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				log.info(">>:"+ph.getStartPage());
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공");
				destPage="/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    		
    	case "detail" :
    		try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = new BoardVO();
				bvo = bsv.detail(bno);
				request.setAttribute("bvo", bvo);
				log.info("detail 성공~!");
				
				
			} catch (Exception e) {
				e.printStackTrace();
			}
    		destPage="/board/detail.jsp";
    		break;
    	case "modify":
    		try {
    			int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = new BoardVO();
				bvo = bsv.modify(bno);
				request.setAttribute("bvo", bvo);
				destPage="/board/modify.jsp";//큰트롤러 list에서 db검색 후 객체가지고 list.jsp로 이동
				
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    		
    	case "edit":
    		try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String tit = request.getParameter("title");
				String wri = request.getParameter("writer");
				BoardVO bvo = new BoardVO(bno,tit,wri);
				isOk = bsv.edit(bvo);
				log.info(">>> edit > "+ (isOk>0 ? "성공":"실패"));
				destPage="list";
			} catch (Exception e) {
				e.printStackTrace();
			}
    		break;
    	}
    	
    	RequestDispatcher rdp = request.getRequestDispatcher(destPage);
    	rdp.forward(request, response);
    	
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
